fignum <<- fignum + 1
filename <- paste0("figs/", fignum, ".png")
rgl.snapshot(filename)
knitr::include_graphics(filename, dpi = 150)
}
} else {
options(rgl.useNULL = TRUE)
beamer <- FALSE
}
library(shiny)
source("airports.R")
library(shiny)
source("airports.R")
library(shiny)
source("data/airports.R")
library(shiny)
source("Shiny_App/data/airports.R")
setwd("~/Desktop")
library(shiny)
source("Personal_Portfolio/Shiny_App/data/airports.R")
library(shiny)
source("/Personal_Portfolio/Shiny_App/data/airports.R")
setwd("~/Desktop/Personal_Portfolio/Shiny_App/data")
library(shiny)
source("airports.R")
library(shiny)
source("airports.R")
library(shiny)
source("airports.R")
setwd("~/Desktop/Personal_Portfolio/Shiny_App/data")
library(shiny)
source("airports.R")
source("airports.R")
source("cancellations.R")
library(shiny)
source("airports.R")
library(shiny)
source("airports.R")
airports
setwd("~/Desktop/Personal_Portfolio/Shiny_App/R_code")
library(shiny)
source("airports.R")
setwd("~/Desktop/Personal_Portfolio/Shiny_App/data")
server <-function(input,output){
source("airports.R")
source("cancellations.R")
output$delayed<- renderPlot({
cutoff<-input$cutoff
par(mar=c(1, 1, 3, 1))
plot(latitude_deg ~ longitude_deg, data = subset(airports,NArrivals>10000), cex=sqrt(NArrivals)/100,ylim=c(21, 50), xlim=c(-125, -65), axes=FALSE, xlab="", ylab="",col="grey")
title("Connections with the most delayed flights")
legend("bottomleft", legend=c("size: No. Flights"), pch=c(1))
legend("bottomright", legend=c("Code size: No. Cancelled Flights"))
with(subset(cancellations, (DepDelay+ArrDelay)>cutoff), segments(longOrigin, latOrigin, longDest, latDest, col="blue", lwd=sqrt(DepDelay+ArrDelay)/30))
text(latitude_deg ~ longitude_deg, label=iata_code, data = subset(airports, NArrivals>10000), ylim=c(21, 50), xlim=c(-125, -65), cex=sqrt(Cancelled)/70)
})
output$cancelled<- renderPlot({
cutoff<-input$cutoff
par(mar=c(1, 1, 3, 1))
plot(latitude_deg ~ longitude_deg, data = subset(airports,NArrivals>10000), cex=sqrt(NArrivals)/100,ylim=c(21, 50), xlim=c(-125, -65), axes=FALSE, xlab="", ylab="",col="grey")
title("Connections with the most cancelled flights")
legend("bottomleft", legend=c("size: No. Flights"), pch=c(1))
legend("bottomright", legend=c("Code size: No. Cancelled Flights"))
with(subset(cancellations, Cancelled>cutoff), segments(longOrigin, latOrigin, longDest, latDest, col="red", lwd=Cancelled/500))
text(latitude_deg ~ longitude_deg, label=iata_code, data = subset(airports, NArrivals>10000), ylim=c(21, 50), xlim=c(-125, -65), cex=sqrt(Cancelled)/70)
})
}
ui <- shinyUI(pageWithSidebar(
headerPanel("What airports and flight connections to avoid?"),
sidebarPanel(
#textInput("delay_cutoff", "Enter your delay cutoff parameter:", "800"),
sliderInput("cutoff", "Cutoff parameter:", min=0, max=750, value=250),
),
mainPanel(
tabsetPanel(
tabPanel("Delayed", plotOutput("delayed")),
tabPanel("Cancelled", plotOutput("cancelled"))
)
)
))
shinyApp(ui=ui, server=server)
server <-function(input,output){
source("airports.R")
source("cancellations.R")
output$delayed<- renderPlot({
cutoff<-input$cutoff
par(mar=c(1, 1, 3, 1))
plot(latitude_deg ~ longitude_deg, data = subset(airports,NArrivals>10000), cex=sqrt(NArrivals)/100,ylim=c(21, 50), xlim=c(-125, -65), axes=FALSE, xlab="", ylab="",col="grey")
title("Connections with the most delayed flights")
legend("bottomleft", legend=c("size: No. Flights"), pch=c(1))
legend("bottomright", legend=c("Code size: No. Cancelled Flights"))
with(subset(cancellations, (DepDelay+ArrDelay)>cutoff), segments(longOrigin, latOrigin, longDest, latDest, col="blue", lwd=sqrt(DepDelay+ArrDelay)/30))
text(latitude_deg ~ longitude_deg, label=iata_code, data = subset(airports, NArrivals>10000), ylim=c(21, 50), xlim=c(-125, -65), cex=sqrt(Cancelled)/70)
})
output$cancelled<- renderPlot({
cutoff<-input$cutoff
par(mar=c(1, 1, 3, 1))
plot(latitude_deg ~ longitude_deg, data = subset(airports,NArrivals>10000), cex=sqrt(NArrivals)/100,ylim=c(21, 50), xlim=c(-125, -65), axes=FALSE, xlab="", ylab="",col="grey")
title("Connections with the most cancelled flights")
legend("bottomleft", legend=c("size: No. Flights"), pch=c(1))
legend("bottomright", legend=c("Code size: No. Cancelled Flights"))
with(subset(cancellations, Cancelled>cutoff), segments(longOrigin, latOrigin, longDest, latDest, col="red", lwd=Cancelled/500))
text(latitude_deg ~ longitude_deg, label=iata_code, data = subset(airports, NArrivals>10000), ylim=c(21, 50), xlim=c(-125, -65), cex=sqrt(Cancelled)/70)
})
}
ui <- shinyUI(pageWithSidebar(
headerPanel("What airports and flight connections to avoid?"),
sidebarPanel(
#textInput("delay_cutoff", "Enter your delay cutoff parameter:", "800"),
sliderInput("cutoff", "Cutoff parameter:", min=0, max=750, value=250),
),
mainPanel(
tabsetPanel(
tabPanel("Delayed", plotOutput("delayed")),
tabPanel("Cancelled", plotOutput("cancelled"))
)
)
))
shinyApp(ui=ui, server=server)
library(shiny)
shinyApp(ui=ui, server=server)
runApp("flight/")
shinyApp(ui=ui, server=server)
library(ggplot2)
library(ggthemr)
top_cancelled_connections<-cancellations[order(cancellations$Cancelled,decreasing=T)[1:5],]
top_cancelled_connections$connections<-row.names(top_cancelled_connections)
top_cancelled_connections
theme_update(plot.title = element_text(hjust = 0.5))
my_graph<-ggplot(top_cancelled_connections, aes(factor(top_cancelled_connections$connections), top_cancelled_connections$Cancelled, fill=factor(top_cancelled_connections$connections))) + geom_bar(stat="identity") + scale_fill_brewer(palette = "Set1")+ggtitle("Amount of Cancelled Flights for Top 5 Worst Connections")+xlab("Airport Codes") + ylab("Cancelled Flights")+scale_fill_manual(values = c("grey", "grey", "grey","red", "lightcoral"))+guides(fill=guide_legend(title="Connections"))+geom_text(aes(label=top_cancelled_connections$Cancelled), vjust=1.6, color="white", size=3.5)
#ggsave("cancelled_flights.pdf")
my_graph
shinyApp(ui=ui, server=server)
binomial.likelihood <- function(x, p, n){
choose(n, x)*p^x*(1-p)^(n-x)
}
binomial.likelihood2 <- function(x, p, n){
p^x*(1-p)^(n-x)
}
curve(binomial.likelihood(7, p=x, 10), xlab="p")
abline(v = 0.7, col=2)
axis(1, at = 0.7, labels=T, col=2)
0.4*0.5
4/50
choose(3,5)
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,0.85))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="dodgerblue4",lty=2, add=TRUE)
# plot the likelihood:
curve(dbeta(x, shape1 = y, shape2 = n-y),
lwd= 2, col=2, lty =2 , add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Likelihood", "Posterior"),
lwd=c(2,2,3), lty=c(2,2,1),
col=c("dodgerblue4", "red", "turquoise2"))
if (save.pdf) dev.off()
alphas <- c(0.5, 1.25, 2, 4, 6, 8)
betas <- 4*alphas
# used to get a reasonable ylim:
this <- outer(alphas, betas,  FUN = function(x,y) dbeta(0.2, x, y))
if (save.pdf) pdf("UIpriors.pdf", height=5)
par(mfrow=c(2,3))
for (i in 1:length(alphas)){
a = alphas[i]
b = betas[i]
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
curve(dbeta(x, shape1 = a, shape2 = b), ylab="",
lwd=2, col=cp[i],lty=lt, ylim=c(0, max(this)+0.05*max(this)),
main= prior.name, xlab=expression(theta))
}
if (save.pdf) dev.off()
lower = qbeta(0.025, shape1=a, shape2=b)
upper = qbeta(0.025, shape1=a, shape2=b, lower.tail = FALSE)
if (save.pdf) pdf("UIcentInt.pdf", height=5)
par(mfrow=c(2,3))
for (i in 1:length(alphas)){
a = alphas[i]
b = betas[i]
lower = qbeta(0.025, shape1=a, shape2=b)
upper = qbeta(0.025, shape1=a, shape2=b, lower.tail = FALSE)
sub.title <- paste("95% central interval (",
round(lower,3), ", ",
round(upper, 3), ")", sep="")
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
curve(dbeta(x, shape1 = a, shape2 = b), ylab="",
lwd=2, col=cp[i],lty=lt, ylim=c(0, max(this)+0.05*max(this)),
main= prior.name, sub=sub.title, xlab=expression(theta))
abline(v=lower, col="dimgrey", lty=2, lwd=1.5)
abline(v=upper, col="dimgrey", lty=2, lwd=1.5)
}
if (save.pdf) dev.off()
save.pdf <- FALSE
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,0.85))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="dodgerblue4",lty=2, add=TRUE)
# plot the likelihood:
curve(dbeta(x, shape1 = y, shape2 = n-y),
lwd= 2, col=2, lty =2 , add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Likelihood", "Posterior"),
lwd=c(2,2,3), lty=c(2,2,1),
col=c("dodgerblue4", "red", "turquoise2"))
if (save.pdf) dev.off()
alpha = a+y
beta =  b+n-y
point.est = alpha/(alpha + beta)
# central interval
lower = qbeta(0.025, shape1=alpha, shape2=beta)
upper = qbeta(1-0.025, shape1=alpha, shape2=beta)
sub.title <- paste("95% central interval (",
round(lower,3), ", ",
round(upper, 3), ")", sep="")
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), ylab="", col="turquoise2",
lwd=2,lty=lt, main= "Tug of War 1", sub=sub.title, xlab=expression(theta))
abline(v = point.est, col = 2, lwd = 2)
abline(v = c(lower, upper), col = "dimgrey", lwd = 2, lty = 2)
if (save.pdf) dev.off()
lower = qbeta(0.025, shape1=alpha, shape2=beta)
upper = qbeta(1-0.025, shape1=alpha, shape2=beta)
sub.title <- paste("95% central interval (",
round(lower,3), ", ",
round(upper, 3), ")", sep="")
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), ylab="", col="turquoise2",
lwd=2,lty=lt, main= "Tug of War 1", sub=sub.title, xlab=expression(theta))
abline(v = point.est, col = 2, lwd = 2)
abline(v = c(lower, upper), col = "dimgrey", lwd = 2, lty = 2)
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,1))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="dodgerblue4",lty=2, add=TRUE)
# plot the likelihood:
curve(dbeta(x, shape1 = y+1, shape2 = n-y+1),
lwd= 2, col=2, lty =2 , add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Likelihood", "Posterior"),
lwd=c(2,2,3), lty=c(2,2,1),
col=c("dodgerblue4", "red", "turquoise2"))
plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,0.8))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="dodgerblue4",lty=2, add=TRUE)
# plot the likelihood:
curve(dbeta(x, shape1 = y+1, shape2 = n-y+1),
lwd= 2, col=2, lty =2 , add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Likelihood", "Posterior"),
lwd=c(2,2,3), lty=c(2,2,1),
col=c("dodgerblue4", "red", "turquoise2"))
if (save.pdf) dev.off()
plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,0.8))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="dodgerblue4",lty=2, add=TRUE)
# plot the likelihood:
curve(dbeta(x, shape1 = y+1, shape2 = n-y+1),
lwd= 2, col=2, lty =2 , add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Likelihood", "Posterior"),
lwd=c(2,2,3), lty=c(2,2,1),
col=c("dodgerblue4", "red", "turquoise2"))
if (save.pdf) dev.off()
10!
save.pdf <- FALSE
setwd("~/Dropbox/GitHub/data_582_instructor/lectures/lecture5/img/")
setwd("/Volumes/Macintosh HD 2/Dropbox/GitHub/data_582_instructor/lectures/lecture5/img/")
if (save.pdf) pdf("stnormprior.pdf", height=4.5)
# standard normal prior:
mu.prior = 0
var.prior = 1
# calculate the hyperparamters for the posterior:
sigma2 = 1
x = 6.5
a = 1/var.prior
b = 1/sigma2
curve(dnorm(x, mu.prior, sqrt(var.prior)),lwd=2, col="dodgerblue4", xlim=c(-4,13), ylim=c(0,0.7), ylab="",lty=2, xlab=expression(theta))
if (save.pdf) pdf("stnormprior.pdf", height=4.5)
# standard normal prior:
mu.prior = 0
var.prior = 1
# calculate the hyperparamters for the posterior:
sigma2 = 1
x = 6.5
a = 1/var.prior
b = 1/sigma2
curve(dnorm(x, mu.prior, sqrt(var.prior)),lwd=2, col="dodgerblue4", xlim=c(-4,13), ylim=c(0,0.7), ylab="",lty=2, xlab=expression(theta))
# using equation (1)
mu.post = (a*mu.prior + b*x)/(a + b)
var.post = 1/(a+b)
# # using equation (2)
# var.post = 1/(1/var.prior + 1/sigma2)
# plot the posterior
curve(dnorm(x, mu.post, sqrt(var.post)),
lwd=2, col="turquoise2", ylab="", add=TRUE)
if (save.pdf) pdf("stnormprior.pdf", height=4.5)
# standard normal prior:
mu.prior = 0
var.prior = 1
# calculate the hyperparamters for the posterior:
sigma2 = 1
x = 6.5
a = 1/var.prior
b = 1/sigma2
curve(dnorm(x, mu.prior, sqrt(var.prior)),lwd=2, col="dodgerblue4", xlim=c(-4,13), ylim=c(0,0.7), ylab="",lty=2, xlab=expression(theta))
# using equation (1)
mu.post = (a*mu.prior + b*x)/(a + b)
var.post = 1/(a+b)
# # using equation (2)
# var.post = 1/(1/var.prior + 1/sigma2)
# plot the posterior
curve(dnorm(x, mu.post, sqrt(var.post)),
lwd=2, col="turquoise2", ylab="", add=TRUE)
# plot the observed data
abline(v=x, col="gray")
legend("topright", lwd=2, lty=1:2, col=c("dodgerblue4","turquoise2"), legend = c("prior", "posterior"))
knitr::opts_chunk$set(echo = TRUE)
x= 75.59
mu.prior = 70
sd.prior = 4
var.prior = sd.prior^2
sigma2 = 2.9^2
a = 1/var.prior
b = 1/sigma2
# using equation
(mu.post = (a*mu.prior + b*x)/(a + b))
(var.post = 1/(a+b))
(lower = qnorm(0.025, mean=mu.post, sd=sqrt(var.post)))
(upper = qnorm(0.025+0.95, mean=mu.post, sd=sqrt(var.post)))
mu.prior = 70
sd.prior = 4
var.prior = sd.prior^2
sigma2 = 2.9^2
a = 1/var.prior
b = 1/sigma2
# using equation
(mu.post = (a*mu.prior + b*x)/(a + b))
(var.post = 1/(a+b))
mu.prior = 30
sd.prior = 4
var.prior = sd.prior^2
sigma2 = 2^2
a = 1/var.prior
b = 1/sigma2
# using equation
(mu.post = (a*mu.prior + b*x)/(a + b))
x
x=38.7
mu.prior = 30
sd.prior = 4
var.prior = sd.prior^2
sigma2 = 2^2
a = 1/var.prior
b = 1/sigma2
# using equation
(mu.post = (a*mu.prior + b*x)/(a + b))
(var.post = 1/(a+b))
x=38.7
mu.prior = 36.92
sd.prior = sqrt(3.2)
var.prior = sd.prior^2
sigma2 = 2^2
a = 1/var.prior
b = 1/sigma2
# using equation
(mu.post = (a*mu.prior + b*x)/(a + b))
(var.post = 1/(a+b))
38.1+40.6+37.5+44.8+41+30.4
232.4/6
x=38.7
mu.prior = 30
sd.prior = 4
var.prior = sd.prior^2
sigma2 = 2^2
a = 1/var.prior
b = 1/sigma2
# using equation
(mu.post = (a*mu.prior + b*x)/(a + b))
(var.post = 1/(a+b))
140/250
a=1
b=5
n=100
y=54
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,0.85))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
a=1
b=5
n=100
y=54
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,0.85))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
a=7
b=3
n=250
y=140
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,0.85))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
a=7
b=3
n=250
y=140
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,1))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
a=7
b=3
n=250
y=140
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,1))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
a=70
b=30
n=250
y=140
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,1))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
a=7
b=3
n=250
y=140
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,1))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
lower = qbeta(0.05/2, shape1 = a+y, shape2 =  b+n-y)
upper = qbeta(1- 0.05/2, shape1 = a+y, shape2 =  b+n-y)
lower = qbeta(0.05/2, shape1 = a+y, shape2 =  b+n-y)
upper = qbeta(1- 0.05/2, shape1 = a+y, shape2 =  b+n-y)
lower
upper
a=7
b=3
n=250
y=140
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,1))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
lower = qbeta(0.05/2, shape1 = a+y, shape2 =  b+n-y)
upper = qbeta(1- 0.05/2, shape1 = a+y, shape2 =  b+n-y)
lower
upper
140/250
a=25
b=25
n=250
y=140
# plot the posterior:
curve(dbeta(x, shape1 = a+y, shape2 = b+n-y), xlab=expression(theta),
lwd=2, col="turquoise2", ylab="", xlim=c(0,1))
# plot the prior:
curve(dbeta(x, shape1 = a, shape2 = b),
lwd=2, col="magenta",lty=2, add=TRUE)
prior.name <- paste("Beta(", a, ", ", b,") Prior",sep="")
legend("topright", legend = c(prior.name, "Posterior"), lwd=c(2,2,3), lty=c(2,2,1), col=c("magenta", "turquoise2"))
lower = qbeta(0.05/2, shape1 = a+y, shape2 =  b+n-y)
upper = qbeta(1- 0.05/2, shape1 = a+y, shape2 =  b+n-y)
lower
upper
