{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Name: Claudia Nikel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As I am new to neural networks I picked an images dataset that could be used to create a CNN similar to I did in a previous lab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The CIFAR-10 dataset\n",
    "The CIFAR-10 and CIFAR-100 are labeled subsets of the 80 million tiny images dataset. The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class (from https://www.cs.toronto.edu/~kriz/cifar.html). There are 50000 training images and 10000 test images. The dataset is divided into five training batches and one test batch, each with 10000 images. The test batch contains exactly 1000 randomly-selected images from each class. The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another. Between them, the training batches contain exactly 5000 images from each class. The class labels and their standard associated integer values are listed below.\n",
    "- 0: airplane\n",
    "- 1: automobile\n",
    "- 2: bird\n",
    "- 3: cat\n",
    "- 4: deer\n",
    "- 5: dog\n",
    "- 6: frog\n",
    "- 7: horse\n",
    "- 8: ship\n",
    "- 9: truck\n",
    "\n",
    "The classes are completely mutually exclusive. There is no overlap between automobiles and trucks. \"Automobile\" includes sedans, SUVs, things of that sort. \"Truck\" includes only big trucks. Neither includes pickup trucks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Import packages/modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from keras.datasets import cifar10\n",
    "from keras.utils import to_categorical\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D\n",
    "from keras.layers import MaxPooling2D\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Flatten\n",
    "from keras.optimizers import SGD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Import the dataset from Keras package "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_images, train_labels), (test_images, test_labels)= cifar10.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Plot some of the images "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/matplotlib/text.py:1150: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  if s != self._text:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(9):\n",
    "    plt.subplot(330 + 1 + i)\n",
    "    plt.imshow(train_images[i])\n",
    "    plt.xlabel(train_labels[i])\n",
    "    plt.xticks([])\n",
    "    plt.yticks([])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### One-hot encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The hardest part of this project was actually getting the data into the correct format for the neural network. We learned that many machine learning algorithms can't operate directly on categorical data directly and require all input variables to be numeric. For this dataset the labels, which are categorical, need to be switched to numeric form. For these labels we used a one-hot encoding, where a new binary variable replaces the integer encoded variable for each unique integer value. \n",
    "(https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_labels=to_categorical(train_labels)\n",
    "test_labels=to_categorical(test_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Prepare the picture data \n",
    "Each image is made up of pixels in the range from 0 to 255 and they need to be scaled in order to be used in the CNN model. After doing some research online, it is a good idea to normalize the pixel data so they have a value between 0 and 1. This is because large inputs can disrupt or slow down the learning process. To normalize the pixels, you need to divide them by the largest pixel value (i.e. 255). The pixels are also converted to the float data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert from integers to floats\n",
    "train_normalized=train_images.astype('float32')\n",
    "test_normalized=test_images.astype('float32')\n",
    "# normalize to range 0-1\n",
    "train_normalized=train_normalized/255.0\n",
    "test_normalized=test_normalized/255.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Define the model\n",
    "Each layer uses the ReLU activation function and the He initilization which are optimal to use. The CNN has a 3-block VGG model which is a good starting point to use (https://arxiv.org/abs/1409.1556). We were able to find many resources online about building VGG models and good starting points. Generally a learning rate of 0.001 and a large momentum of 0.9 is good."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_fc_model():\n",
    "    fc_model=Sequential()\n",
    "    #First VGG Block\n",
    "    fc_model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))\n",
    "    fc_model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
    "    fc_model.add(MaxPooling2D((2, 2)))\n",
    "    #Second VGG Block\n",
    "    fc_model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
    "    fc_model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
    "    fc_model.add(MaxPooling2D((2, 2)))\n",
    "    #Third VGG Block\n",
    "    fc_model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
    "    fc_model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
    "    fc_model.add(MaxPooling2D((2, 2)))\n",
    "    #Define a Flatten layer\n",
    "    fc_model.add(Flatten())\n",
    "    #Define the activation function for the first fully connected (Dense) layer\n",
    "    fc_model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n",
    "    #Define the second Dense layer to output the classification probabilities\n",
    "    fc_model.add(Dense(10, activation='softmax'))\n",
    "    #10 nodes for the 10 classes\n",
    "    #softmax=function that normalizes our values to a standard range (0 to 1)\n",
    "    return fc_model\n",
    "\n",
    "model=build_fc_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Compile the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "opt = SGD(lr=0.001, momentum=0.9)\n",
    "model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "BATCH_SIZE=64\n",
    "EPOCHS=40\n",
    "trained_model=model.fit(train_normalized, train_labels, batch_size=BATCH_SIZE, epochs=EPOCHS,validation_data=(test_normalized, test_labels), verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'val_loss': [1.5071010984420776,\n",
       "  1.2967187349319458,\n",
       "  1.2064158058166503,\n",
       "  1.076660175514221,\n",
       "  1.0282138958930969,\n",
       "  1.049152336883545,\n",
       "  0.9734422574996948,\n",
       "  1.0146131706237793,\n",
       "  0.9264654615402221,\n",
       "  0.9044828985214234,\n",
       "  0.9142084038734436,\n",
       "  0.9408901608467102,\n",
       "  0.9450634894371033,\n",
       "  0.9451826473236083,\n",
       "  1.0504633752822876,\n",
       "  1.1461503400802613,\n",
       "  1.1338293529510497,\n",
       "  1.160650235748291,\n",
       "  1.269395637321472,\n",
       "  1.2936937854766846,\n",
       "  1.4134940294265748,\n",
       "  1.4281180461883545,\n",
       "  1.5377424379348754,\n",
       "  1.657490390777588,\n",
       "  1.7752749099731446,\n",
       "  1.779658278274536,\n",
       "  1.89836962890625,\n",
       "  1.9300825771331787,\n",
       "  2.0796964488983156,\n",
       "  1.9409466007232665,\n",
       "  2.0366564420700075,\n",
       "  2.1894261409759523,\n",
       "  2.0338920463562014,\n",
       "  2.2246124702453614,\n",
       "  2.293518137741089,\n",
       "  2.257415628814697,\n",
       "  2.3157348987579347,\n",
       "  2.3354961334228515,\n",
       "  2.217507133102417,\n",
       "  2.353929195404053],\n",
       " 'val_accuracy': [0.4564000070095062,\n",
       "  0.5317000150680542,\n",
       "  0.5676000118255615,\n",
       "  0.6216999888420105,\n",
       "  0.6383000016212463,\n",
       "  0.6413999795913696,\n",
       "  0.6643999814987183,\n",
       "  0.6539000272750854,\n",
       "  0.6870999932289124,\n",
       "  0.6956999897956848,\n",
       "  0.6891999840736389,\n",
       "  0.6948000192642212,\n",
       "  0.6923999786376953,\n",
       "  0.6998999714851379,\n",
       "  0.6805999875068665,\n",
       "  0.6744999885559082,\n",
       "  0.6819000244140625,\n",
       "  0.6958000063896179,\n",
       "  0.6825000047683716,\n",
       "  0.6929000020027161,\n",
       "  0.6837999820709229,\n",
       "  0.6901000142097473,\n",
       "  0.6913999915122986,\n",
       "  0.6850000023841858,\n",
       "  0.6809999942779541,\n",
       "  0.6913999915122986,\n",
       "  0.6844000220298767,\n",
       "  0.6877999901771545,\n",
       "  0.6859999895095825,\n",
       "  0.6884999871253967,\n",
       "  0.6959999799728394,\n",
       "  0.6812999844551086,\n",
       "  0.6901999711990356,\n",
       "  0.6937999725341797,\n",
       "  0.6861000061035156,\n",
       "  0.6915000081062317,\n",
       "  0.6905999779701233,\n",
       "  0.6883999705314636,\n",
       "  0.6972000002861023,\n",
       "  0.6920999884605408],\n",
       " 'loss': [1.7573246701812744,\n",
       "  1.3976265185546874,\n",
       "  1.2361870601081848,\n",
       "  1.1114888816833497,\n",
       "  1.0119129763412475,\n",
       "  0.9267925757312775,\n",
       "  0.8580599827194214,\n",
       "  0.7912175420188904,\n",
       "  0.7317239734268188,\n",
       "  0.6775653358459472,\n",
       "  0.621151882572174,\n",
       "  0.5695932686519622,\n",
       "  0.5164215573406219,\n",
       "  0.46505862354278565,\n",
       "  0.4179935906028748,\n",
       "  0.37333012055397036,\n",
       "  0.3343025374364853,\n",
       "  0.28507848651647566,\n",
       "  0.2480273166179657,\n",
       "  0.2128279731464386,\n",
       "  0.181154474619627,\n",
       "  0.15354994432926178,\n",
       "  0.1398707616829872,\n",
       "  0.11325982064962387,\n",
       "  0.10281802940607071,\n",
       "  0.08290494720935822,\n",
       "  0.09634883898615837,\n",
       "  0.07961625721812249,\n",
       "  0.07279456790864468,\n",
       "  0.07112232064545154,\n",
       "  0.05463856768041849,\n",
       "  0.03590083880990744,\n",
       "  0.05537712288528681,\n",
       "  0.043694923611581324,\n",
       "  0.03715714489802718,\n",
       "  0.037909324560314414,\n",
       "  0.03812343894138932,\n",
       "  0.04062352857038379,\n",
       "  0.055045997793674466,\n",
       "  0.033624778726249936],\n",
       " 'accuracy': [0.36626,\n",
       "  0.49702,\n",
       "  0.55952,\n",
       "  0.60962,\n",
       "  0.64376,\n",
       "  0.6747,\n",
       "  0.70194,\n",
       "  0.7229,\n",
       "  0.74456,\n",
       "  0.76368,\n",
       "  0.78336,\n",
       "  0.80122,\n",
       "  0.82044,\n",
       "  0.83782,\n",
       "  0.8538,\n",
       "  0.8694,\n",
       "  0.88122,\n",
       "  0.89982,\n",
       "  0.91376,\n",
       "  0.92598,\n",
       "  0.9352,\n",
       "  0.94624,\n",
       "  0.95118,\n",
       "  0.96096,\n",
       "  0.9642,\n",
       "  0.97192,\n",
       "  0.96544,\n",
       "  0.9713,\n",
       "  0.97494,\n",
       "  0.9753,\n",
       "  0.98178,\n",
       "  0.98806,\n",
       "  0.98112,\n",
       "  0.98564,\n",
       "  0.98762,\n",
       "  0.98686,\n",
       "  0.98708,\n",
       "  0.98582,\n",
       "  0.98024,\n",
       "  0.98808]}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_model.history"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. Evaluate accuracy on test dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 4s 422us/step\n",
      "Test accuracy: 0.6272000074386597\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_acc=model.evaluate(test_images, test_labels)\n",
    "print('Test accuracy:', test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9. Plot the accuracy \n",
    "In general, models improve with more epochs of training, but only to a point and then they will start to plateau in accuracy as they converge. Originally I tried using 100 epochs but it wouldn't run on my computer. I decided to slowly increase the number of epochs and was able to run the model with 40 epochs. The red line represents the model's performance on the training dataset and the blue line represents the models performance on the test dataset. The accuracy on the test data is around 62%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x643a4f750>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot accuracy\n",
    "plt.subplot(212)\n",
    "plt.title('Classification Accuracy')\n",
    "plt.plot(trained_model.history['accuracy'], color='red', label='train')\n",
    "plt.plot(trained_model.history['val_accuracy'], color='blue', label='test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9. Plot the loss \n",
    "You can see from this graph that the model overfits the test data because the models performance on the training data (red line) decreases (so it improves) whereas on the test data (blue line) improves slightly but then increases (gets worse) around 10 epochs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x646067250>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot loss\n",
    "plt.subplot(212)\n",
    "plt.title('Cross Entropy Loss')\n",
    "plt.plot(trained_model.history['loss'], color='red', label='train')\n",
    "plt.plot(trained_model.history['val_loss'], color='blue', label='test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9. Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because the images are of very low resolution that could be a cause for the misclassification and lower accuracy. As well using a higher number of epochs, say 100, would definitely give an improved result. The model was able to learn the training data, which is a good sign. To improve the results of the model on the test data, you could add more VGG blocks. However, increasing the number of epochs (the number of complete passes through the training dataset) and the number of VGG blocks requires more computer power and time. This model also shows overfitting at around 10-15 epochs. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Resources: <br/>\n",
    "[1]https://www.cs.toronto.edu/~kriz/cifar.html <br/>\n",
    "[2]https://machinelearningmastery.com/how-to-manually-scale-image-pixel-data-for-deep-learning/ <br/>\n",
    "[3]https://arxiv.org/abs/1409.1556 <br/>\n",
    "[4]https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning/\n",
    "[5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
